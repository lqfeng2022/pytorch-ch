export default [
  { id: 1, 
    name: "人工智能",
    sections: [
      { id: 1,
        name: "1. 人工智能(AI)", 
        value: "Artificial Intelligence (AI) is a branch of Computer Science that makes Machines and Systems perform tasks that Simulate Human Intelligence.",
        image: "",
        content: [
          { id: 1, 
            title: "",
            value: "人工智能(AI)是计算机科学的一个分支, 目的是为了让机器或者说一个系统具备甚至超越人的智能从而执行一些特定的任务。这些任务包括且不限于已有经验和新信息的学习、并推理稍微复杂的问题、识别图片文字语音、理解和处理自然语言, 甚至做出决策。"
          },
          { id: 2, 
            title: "",
            value: "AI系统可以分为不同的层次, 从专用AI(用于特定任务, 如面部识别或语言翻译)到通用型AI (AGI), 后者可以执行人类能做的任何智力型工作。虽然我们目前处于专用AI的阶段, 不过ChatGPT的不断迭代似乎预示着AGI的时代很快就会到来。"
          },
          { id: 3,
            title: "",
            value: "人工智能给我们日常生活的方方面面提供了很多支持, 比如抖音等流媒体的推荐算法到ChatGPT的全能助手、特斯拉的全自动驾驶 (FSD) 以及AlphaFold模型在生物高分子领域的突破式发展等等。随着AI的高速发展, 它正在全面且彻底地变革行业、推动创新, 但同时也带来了需要一些重要的伦理和安全问题。"
          }
        ]
      },
      { id: 2, 
        name: "1.1 为什么我们需要了解 AI?",
        value: "",
        image: "src/assets/chapter_zero/aiwhy.jpeg",
        content: [
          { id: 1, 
            title: "ChatGPT", 
            value: "自从ChatGPT-3.5在2022年11月30日发布之后, AI第一次给世人带来了一些不一样的东西, 似乎它真的具备人的智能, 它可以回答你几乎所有的问题, 而且准确性相当高。在文本理解和翻译上也超越了其他一些专业模型, 它似乎真的明白你在说什么, 给人一种很懂你的感觉。如果你对ChatGPT和人工智能感兴趣, 你应该参加这门课程。我将揭开神秘的面纱——ChatGPT, 最成功和最强大的人工智能产品。"
          },
          { id: 2, 
            title: "AI无处不在 ",
            value: "人工智能就在我们身边。即使现在, 当你看这段文字或者视频的时后。你可以在望向摄像头或者拿起iPhone时看到它。当你去公司或者学校、去餐馆、购物或与朋友聊天时, 你可以感受到它。这个世界AI无所不在, 在你不经意的一瞬间你的一言一行一举一动都被它看在眼里。事实是, AI一直都在看着你！它知道你去了哪儿, 吃了什么, 买了什么, 甚至还知道你和朋友聊了什么。"
          },
          { id: 3,
            title: "提升工作效率",
            value: "AI很好用, 特别是在处理重复性任务时, 比如大量的数据录入、大量文本内容的总结, 论文分析等等。有了AI处理这些无聊的任务, 我们可以更专注于高价值性工作, 比如进行一些战略性分析和高效社交等等。"
          },
          { id: 4,
            title: "AI驱动的机器人",
            value: "如果你有一个可以帮你做饭、洗碗、打扫地板、还可以帮你照顾父母和小孩, 甚至可以像老朋友一样和你聊天的AI机器人, 你会愿意为此付费吗？"
          }
        ]
      },
      { id: 3,
        name: ":: 图灵测试", 
        value: "",
        image: "src/assets/chapter_zero/turingtest.jpeg",
        content: [
          { id: 1, 
            title: "",
            value: "艾伦·图灵是第一个探索“机器智能”的人。在他1950年的论文《计算机与智能》中, 他提出了图灵测试, 并讨论了机器具备智能的可能性。这是一个重要的里程碑, 为人工智能研究奠定了基础, 之后人工智能在1956年正式成为一个学术课题。"
          },
          { id: 2, 
            title: "",
            value: "理解图灵测试的典型方式是这样的：有3个参与者—A、B和C。C是审问者, 他的任务是判断另外两者中谁是电脑, 谁是人类。难点在于：审问者只能通过书面提问来做出这个决定。"
          }
        ]
      },
      { id: 4, 
        name: ":: 专家系统", 
        value: "",
        image: "src/assets/chapter_zero/expertsystem.jpeg",
        content: [
          { id: 1, 
            title: "",
            value: "在20世纪80年代初, 人工智能研究因专家系统的商业成功而得到推动。专家系统是模仿人类专家的知识和分析技能的AI程序。"
          },
        ]
      },
      { id: 5, 
        name: ":: Connectionism + 神经网络", 
        value: "",
        image: "src/assets/chapter_zero/connectionism.jpeg",
        content: [
          { id: 1, 
            title: "",
            value: "几年后, 由杰弗里·辛顿(Geoffrey Hinton)等人推动的 Connectionism 的复兴成为最大突破之一, 它让神经网络研究重获新生—神经网络的核心是模拟大脑神经网络的工作方式。"
          },
          { id: 2, 
            title: "",
            value: "Connectionism 背后的核心思想是, 人类思维过程实现的物质基础是一个由相互连接在一起的基本单元组成的庞大网络。这些基本单元代表神经元细胞, 而它们之间的连接类似于突触, 一种人类大脑神经元细胞间的的信号连接方式。"
          }
        ]
      },
      { id: 6, 
        name: ":: 卷积神经网络 (CNN)", 
        value: "",
        image: "src/assets/chapter_zero/cnn.jpeg",
        content: [
          { id: 1, 
            title: "",
            value: "1990年, Yann LeCun 展示了卷积神经网络可以准确识别手写数字。这是神经网络的首次重大成功之一。"
          }
        ]
      },
      { id: 7, 
        name: ":: AlphaGo", 
        value: "",
        image: "src/assets/chapter_zero/alphago.jpeg",
        content: [
          { id: 1,
            title: "",
            value: "深度学习在2012年开始成为人工智能领域的主要方向, 这要归功于更好的硬件和大数据的获取。在2015年, DeepMind 的 AlphaGo 登上头条, 因为它击败了围棋世界冠军。该程序只被赋予了规则, 并自行摸索出了策略。"
          },
        ]
      },
      { id: 8, 
        name: ":: ChatGPT", 
        value: "",
        image: "src/assets/chapter_zero/openai.jpeg",
        content: [
          { id: 1, 
            title: "",
            value: "时间来到2022年底, OpenAI 发布了 GPT-3.5, 一个大型语言模型的聊天机器人, 可以以类人的口吻回答你提出的问题。"
          }
        ]
      },
    ]
  },
  { id: 2, 
    name: "Machine Learning",
    sections: [
      { id: 0, 
        name: "2. 机器学习", 
        value: "Machine Learning (ML) is a subset of AI that perform Specific Tasks without being Explicitly Programmed.",
        image: "",
        content: [
          { id: 1, 
            title: "",
            value: "这是机器学习的定义, 我们通过一个例子来解释它。"
          },
          { id: 2, 
            title: "",
            value: "假设我让你写一个程序, 扫描一张图片来判断它是猫还是狗。如果你尝试使用传统的编程方式来写这个程序, 它会变得过于复杂。你需要制定大量的规则来处理一些曲线啊、边缘、颜色、耳朵形状和其他特征, 用来区分猫和狗。这个时候如果我给你一张黑白照片, 这些设定好的规则可能就不起作用了, 你可能需要重新设定。或者, 如果图片是从不同的角度拍摄的, 你的程序可能又无法正确识别了。"
          },
          { id: 3,
            title: "",
            value: "因此, 尝试用传统编程方法来解决这个问题不仅复杂, 在某些情况下甚至是不可能的。现在, 假设我让你扩展这个程序, 识别三种动物 — 猫、狗和马, 你又必须重新设定所有的规则, 这显然不切实际。这时, 机器学习就派上用场了。"
          },
          { id: 4,
            title: "",
            value: "机器学习专门为处理这样的问题而设计的。简单说说它的工作原理：我们首先构建一个模型, 并向它输入大量数据, 比如成千上万张猫和狗的图片。然后模型会自发从这些输入数据中学习某些模式, 比如猫的一些特征。经过训练后, 我们可以给模型输入一张它没有见过的猫或狗的图片, 问它是猫还是狗, 模型会给出一个带有一定准确率的答案。我们提供的数据越多, 模型的准确性就越高。"
          }
        ]
      },
      { id: 1,
        name: "2.1 机器学习 vs. 传统编程",
        value: "",
        image: "src/assets/chapter_zero/mlcomparing.jpeg",
        content: [
          { id: 1, 
            title: "传统编程", 
            value: "传统编程依赖于规则的制定, 在这种方法中, 你必须提前明确计算机要遵循的规则。当了你确定了规则和指令顺序, 计算机就会去执行这些规则和指令。"
          },
          { id: 2, 
            title: "机器学习",
            value: "而机器学习是一种数据驱动的方法。你不用编写明确的规则, 而是提供一个模型和大量的数据。然后, 模型通过这些大量的数据不断训练, 从而自主学习某些特征来确认输入数据和输出数据之间的关系。"
          },
        ]
      },
      { id: 2, 
        name: ":: 向量支持机 (SVMs)", 
        value: "",
        image: "src/assets/chapter_zero/svms.jpeg",
        content: [
          { id: 1, 
            title: "",
            value: "SVMs 是一种用于分类和回归任务的有监督学习方法。当你有一组训练样本, 每个样本都标记为属于两个类别之一时, SVM算法会构建一个模型来预测新的样本属于哪个类别。不仅是线性分类, SVM还可以处理非线性分类。"
          },
      ]},
      { id: 3, 
        name: ":: 决策树",
        value: "",
        image: "src/assets/chapter_zero/decisiontree.jpeg",
        content: [
          { id: 1, 
            title: "",
            value: "它是一个使用树状结构来表示决策及其可能结果的层次模型。与模仿生物神经网络(ANNs)的模型不同, 决策树更像是对人类逻辑的模拟。决策树就像一个对话流程图, 其中每个内部节点表示对某个属性的测试, 每个分支表示测试的输出, 每个分支表示一个类别标签。从根部到叶端的路径展示了分类规则。"
          },
      ]},
      { id: 4, 
        name: ":: 人工神经网络(ANNs)", 
        value: "",
        image: "src/assets/chapter_zero/anns.jpeg",
        content: [
          { id: 1, 
            title: "",
            value: "它是一个受人类大脑启发的 Connectionism 系统。我们可以把大脑看成一个基本上由可以传递电信号或者化学信号的神经元组成的网络。"
          },
          { id: 2, 
            title: "",
            value: "人工神经网络(ANNs)通过使用一组连接的单元或“人工神经元”来模拟这一过程, 类似于大脑神经元的工作方式。在这个模型中, 每个人工神经元都可以接收信号, 处理信号, 然后将信号传递给其他神经元。"
          }
      ]},
    ]
  },
  { id: 3, 
    name: "Deep Learning",
    sections: [
      { id: 0, 
        name: "3. 深度学习", 
        value: "Deep Learning (DL) is a subset of Machine Learning that utilizes neural networks with multiple layers to model complex patterns in data.",
        image: "",
        content: [
          { id: 1, 
            title: "",
            value: "让我们用机器学习中提到的区分猫和狗的例子来说说什么是深度学习。"
          },
          { id: 2, 
            title: "",
            value: "在传统的机器学习中, 我们依赖一种称为特征提取的技术。过程是这样的：首先, 我们手动从图像中提取特征, 比如边缘、纹理、颜色或猫狗常见的耳朵形状等。然后, 我们将这些特征输入到机器学习模型中, 例如决策树。在训练过程中, 模型就可以学习这些特征。训练完成之后, 当我们给它一张新的图片时, 模型会利用学到的模式来分类该图片是猫或者狗。"
          },
          { id: 3,
            title: "",
            value: "传统机器学习的一个关键点是, 我们必须手动选择和提取能够帮助模型做出准确分类的特征, 当然也有一些专门的算法处理这一过程, 不过也需要人为的大量工作。"
          },
          { id: 4,
            title: "",
            value: "但是, 如果我们使用深度学习模型来判断一张图片是猫还是狗呢？首先, 我们不需要手动提取特征。我们可以直接将原始的未处理过的图片直接输入到一个神经网络中, 比如一个卷积神经网络(CNN), 在训练过程中, 它会自动学习这些特征。比如说, 在第一个隐藏层中, 可能会检测到像边缘这样的基础模式。随着数据通过更多的隐藏层, 神经网络会学习识别更复杂的特征, 比如耳朵的形状, 一旦训练完成, CNN可以使用它学到的特征来分析新的图像并判断它是猫还是狗。"
          },
          { id: 5,
            title: "",
            value: "关键在于, 深度学习可以自动提取特征, 这使得模型可以直接从原始数据中学习, 大大简化了工作流程, 节省了人力资源。所以在计算机视觉领域, 深度学习比传统的机器学习方法有更好的表现。"
          },
        ]
      },
      { id: 1, 
        name: "3.1 深度学习 < 机器学习 < AI",
        value: "",
        image: "src/assets/chapter_zero/relationships.jpeg",
        content: [
          { id: 1, 
            title: "", 
            value: "人工智能(AI)是一个广义概念, 指一种计算机系统可以执行一些需要人类智能参入才可以完成的任务。机器学习(ML)是AI的一个子集, 它专注于创建算法和模型, 使计算机能够从数据中学习, 并基于数据做出预测或决策。深度学习(DL)是机器学习的一个子集。它主要指多层神经网络 (因此称为”深度”), 这些网络可以自动学习数据中的复杂模式。"
          },
        ]
      },
      { id: 2, 
        name: ":: 机器学习模型(决策树)",
        value: "",
        image: "src/assets/chapter_zero/mlcat.jpeg",
        content: [
          { id: 1, 
            title: "",
            value: "在机器学习中, 输入的数据必须是结构化的, 这意味着我们需要手动从图像中提取特征, 或者可以使用其他算法来自动完成这个过程。"
          },
          { id: 2, 
            title: "",
            value: "然后, 决策树模型通过学习这些输入特征来区分数据。它根据某些条件创建分支(例如, “如果图像具有某种纹理, 则选择左分支；否则, 右分支”)。决策树不断区分数据, 直到一个位于末端的决策点, 最终将图像分类为“猫”或“不是猫”。"
          },
          { id: 3, 
            title: "",
            value: "当我们给定模型一个新图像时, 必须提取相同的特征, 并通过决策树进行处理。虽然这个过程相对简单直接, 但是在特征提取阶段会显得过于重复和繁琐。"
          },
        ]
      },
      { id: 3, 
        name: ":: 深度学习模型 (神经网络)",
        value: "",
        image: "src/assets/chapter_zero/dlcat.jpeg",
        content: [
          { id: 1, 
            title: "",
            value: "在这里, 输入数据是一张原始图片, 我们不需要像传统机器学习那样将其转换为结构化数据。神经网络会在初始层自动提取图片中的特征, 如边缘、纹理和图案。这些特征在更深的层次中组合起来, 以检测更复杂的结构, 如毛发图案、眼睛和耳朵。"
          },
          { id: 2, 
            title: "",
            value: "神经网络通过反向传播进行学习, 根据在带标签的数据集(如标记为“猫”或“不是猫”的图像)上训练时犯的错误 (损失值) 来调整其参数。随着时间的推移, 模型在识别区分猫和其他物体特征方面会变得越来越好。"
          },
          { id: 3, 
            title: "",
            value: "训练完成后, 神经网络能够将一张新图像通过其各层处理, 并输出一个概率值 (0 ~ 1), 表示该图片包含猫的可能性。根据这个概率值, 模型可以将图像分类为“猫”或“不是猫”。"
          },
        ]
      },
      { id: 4, 
        name: "3.3 机器学习和深度学习的区别",
        value: "",
        image: "src/assets/chapter_zero/mldl.jpeg",
        content: [
          { id: 1, 
            title: "结构化数据",
            value: "结构化数据是以清晰、可预测的格式组织起来的, 通常是表格形式, 如电子表格或数据库。每个数据点都符合特定类别, 因此容易进行搜索、分析和管理。例如, 电子表格和数据库中的数字、日期、字符串等。"
          },
          { id: 2, 
            title: "非结构化数据",
            value: "非结构化数据是没有预定义或组织格式的信息。与结构化数据不同, 它不能整齐地适应表格、行或列, 因此很难用传统工具进行存储、搜索和分析。例如图片、视频、音频记录、文本文档、网页等。"
          },
          { id: 3, 
            title: "数据集",
            value: "数据集是数据的集合, 通常以结构化格式组织, 用于分析、研究或训练机器学习模型。深度学习需要大量数据, 因为它们学习复杂的模式, 需要大量的例子来实现良好的泛化, 且通常处理高维数据。模型的数据越多, 其表现就越好, 因此大型数据集是成功应用深度学习的关键。"
          },
          { id: 4, 
            title: "算法",
            value: "神经网络已经成为机器学习领域最强大的模型之一。"
          },
          { id: 5, 
            title: "监督学习",
            value: "监督学习是一种机器学习方法, 模型在标记好的数据集上进行训练。在这种情况下, “标记”意味着每个训练样例都有一个输出标签, 表示正确的答案。监督学习的目标是让模型能够根据新的、未见过的数据做出预测或决策。监督学习就是通过已知正确答案的例子来教模型预测或分类数据。这是机器学习中最常见且强大的方法, 特别适用于有大量标记数据可用于训练的场景。"
          },
          { id: 6, 
            title: "非监督学习",
            value: "无监督学习是一种机器学习方法, 模型在没有明确标签或输出类别的数据集上进行训练。与监督学习不同, 模型在训练期间不会得到正确答案或指导。相反, 它尝试在数据中自主寻找模式、关系或结构。无监督学习就像是在探索未知的领域——模型在数据中寻找模式和关系, 但并不知道要找到什么。它特别适用于当你有大量数据但不确定要寻找什么, 或者想揭示数据中的隐藏结构或模式的情况。"
          },
        ]
      },
      { id: 5,
        name: "3.4 深度学习应用",
        value: "",
        image: "src/assets/chapter_zero/dlapps.jpeg",
        content: [
          { id: 1, 
            title: "图像识别",
            value: "图像识别是计算机视觉的一部分, 帮助计算机识别图片或摄像头中的内容。无论是你狗的照片、人脸还是停车标志, 图像识别让计算机可以分析图像并告诉你它看到的是什么。图像识别无处不在, 比如当你拿起 iPhone 时, 它通过识别你的脸来解锁, 或帮助自动驾驶汽车识别并避开道路上的障碍物。"
          },
          { id: 2, 
            title: "自然语言处理(NLP)", 
            value: "自然语言处理(NLP)帮助计算机理解和与人类语言互动, 它让计算机能够像我们一样读、写和交谈。NLP 在很多应用中都很有用, 例如, 它可以翻译语言(如 Google 翻译), 将语音转换为文字(如你对 Siri 说话时), 并生成自然语言文本(如 ChatGPT 生成文本)。简而言之, NLP 让计算机能够通过文本或语音与我们以自然的方式沟通。"
          },
          { id: 3, 
            title: "语音识别", 
            value: "语音识别是一项让计算机能够理解和处理口语的技术。它使你的手机、智能音箱和其他设备能够“听到”你说的话并相应作出回应。语音识别技术支持像 Siri 这样的语音助手, 使你可以通过与设备对话来与它们互动。"
          },
          { id: 4, 
            title: "推荐算法",
            value: "推荐系统是一种根据用户的偏好、行为或其他数据为用户推荐产品、服务或内容的技术。它能帮助像亚马逊、京东这样的在线平台向你展示你可能喜欢的东西。在日常生活中, 推荐系统无处不在, 帮助你发现新产品、电影、音乐, 甚至在社交媒体上结识新朋友。推荐系统的设计目的是让你的体验更加个性化和相关性更高, 通过展示符合你品味和兴趣的内容。然而, 它也可能带来隐私问题或将我们局限于某种信息圈(信息茧房)。"
          },
        ]
      }
    ]
  },
  { id: 4, 
    name: "Neural Network",
    sections: [
      { id: 0, 
        name: "4. 神经网络", 
        value: "A Neural Network (NN) is a type of algorithm designed to mimic the way the human brain processes information and the connections between neurons.",
        image: "",
        content: [
          { id: 1, 
            title: "",
            value: "神经网络是深度学习的核心。因为它们具有一种独特的能力, 能够以模仿人类大脑的方式进行学习和决策。"
          },
          { id: 2, 
            title: "",
            value: "神经网络由多层相互连接的节点(或称为神经元)组成, 这些节点以受人类大脑结构启发的方式处理数据。每个神经元接收输入, 处理它, 然后将其传递到下一层的神经元。随着数据通过这些层, 网络学会识别模式, 并根据所看到的数据做出决策。"
          },
          { id: 3, 
            title: "",
            value: "神经网络特别强大的原因在于它们在训练过程中能够自动调整神经元之间的连接(称为权重)。这种调整使网络随着时间的推移提高其准确性, 从而能够处理诸如图像和语音识别、语言翻译甚至玩游戏等复杂任务。"
          },
          { id: 4, 
            title: "",
            value: "神经网络还能够对所训练的数据进行泛化, 这意味着即使面对新的、未见过的数据, 它们也能做出准确的预测或决策。这种泛化能力使得神经网络在现实世界的应用中非常有效, 因为训练数据的确切条件在现实中往往很难完全匹配。"
          },
          { id: 5, 
            title: "",
            value: "总之, 神经网络对于深度学习至关重要, 因为它们为机器提供了一种灵活而强大的方法, 能够从数据中学习并做出决策, 同时模仿人类大脑的处理过程。"
          },
        ]
      },
      { id: 1,
        name: "4.1 神经网路架构",
        value: "A neural network consists of layers of interconnected units called neurons or nodes. Here's a breakdown of its basic components:",
        image: "src/assets/chapter_zero/nnmodel.jpeg",
        content: [
          { id: 1, 
            title: "神经元",
            value: "神经元是网络的基本处理单元, 类似于大脑中的神经元。每个神经元接收输入, 进行处理(通常通过加权求和后应用激活函数), 然后将输出传递到下一层。激活函数引入非线性, 使网络能够建模复杂的模式。"
          },
          { id: 2, 
            title: "连接", 
            value: "一层中的神经元通过权重连接到下一层的神经元。这些连接可以是全连接的(即一层中的每个神经元都与下一层的每个神经元连接)或稀疏连接的。连接上的权重是网络在训练过程中学习的参数, 调整它们以最小化预测中的误差。"
          },
          { id: 3, 
            title: "输入", 
            value: "这是网络的第一层, 数据在此被输入网络。该层中的每个神经元表示输入数据的一个特征。通常, 该层中的神经元数量等于输入特征的数量。"
          },
          { id: 4, 
            title: "隐藏层",
            value: "隐藏层位于输入层和输出层之间, 执行计算并从输入数据中提取特征。“深度学习”一词指的是具有多个隐藏层的网络。隐藏层的神经元数量和层数根据任务的复杂性而变化, 通常作为超参数进行调整。"
          },
          { id: 5, 
            title: "输出",
            value: "这是网络的最后一层, 提供输出, 例如基于处理后的输入的分类、预测或其他结果。在分类任务中, 输出层中的神经元数量对应于输出类别的数量；在回归任务中, 输出层中的神经元数量对应于预测值的数量。"
          },
        ]
      },
      { id: 2,
        name: "4.2 什么是大脑神经元?",
        value: "",
        image: "src/assets/chapter_zero/neurons.jpeg",
        content: [
          { id: 1, 
            title: "神经元",
            value: "神经元是大脑和神经系统的基本工作单元。这些特殊的细胞通过电信号和化学信号相互传递信息。单个神经元可以处理来自许多其他神经元的信号, 并将处理后的信号传递给其他神经元。每个神经元由三个主要部分组成：细胞体(胞体)、树突(接收信号)和轴突(发送信号)。"
          },
          { id: 2, 
            title: "神经网络", 
            value: "神经元彼此相互连接, 形成复杂的神经网络, 这些网络支持大脑的所有功能, 包括视觉、听觉、嗅觉、味觉、感觉、思考, 甚至做梦。这些网络不是静态的；它们通过突触可塑性这一过程不断变化和适应, 而突触可塑性对学习和记忆至关重要。"
          },
          { id: 3, 
            title: "神经系统", 
            value: "以大脑为核心的神经系统是人体的通信网络。它控制我们的一切行为, 从呼吸和运动到思考、做梦和感觉。神经系统不仅包括大脑, 还包括脊髓和外周神经, 这些神经使大脑能够与身体的其他部分进行通信和控制。该网络管理着自愿动作(如移动)和不自愿动作(如呼吸)。"
          },
          { id: 4, 
            title: "大脑的神经网络 vs. 深度学习的神经网络", 
            value: "大脑中神经网络的结构和功能启发了深度学习中的人工神经网络的发展。尽管大脑中的生物神经网络由数十亿个相互连接的神经元组成, 这些神经元通过经验适应和学习, 但深度学习中的神经网络由人工神经元组成, 并以层状排列。这些人工网络被设计用来模拟人脑处理信息的方式。在深度学习中, 神经网络通过大量数据自动学习特征和模式, 类似于大脑从感官输入中学习。然而, 深度学习模型虽然强大, 但仍然比大脑极其复杂的网络要简单得多, 灵活性也有限。"
          },
        ]
      }
    ]
  },
  { id: 5,
    name: "框架和库",
    sections: [
      { id: 0, 
        name: "PyTorch",
        value: "",
        image: "",
        content: [
          { id: 1,
            title: "",
            value: "PyTorch 是一个基于 Torch 库的流行开源深度学习框架, 由 Meta AI 开发。它极具用户友好性, 使其成为构建和训练神经网络的首选工具, 特别是当你需要一个直观且灵活的工具时。"
          },
          { id: 2, 
            title: "",
            value: "PyTorch 在研究和工业界都被广泛使用, 既强大又易于使用。无论你是深度学习初学者, 还是从事高级 AI 项目, PyTorch 都是一个很好的选择。它拥有强大的社区支持, 因此你可以找到大量的教程、资源、问题跟踪器和帮助。"
          }
        ],
      },
      { id: 1, 
        name: "TensorFlow",
        value: "",
        image: "",
        content: [
          { id: 1,
            title: "",
            value: "TensorFlow 是最受欢迎的深度学习框架之一, 由谷歌大脑团队开发。与 PyTorch 相比, 它更具结构性, 特别适合扩展项目并将其部署到生产环境中, 尤其是在需要跨多个设备或云端运行时。"
          },
          { id: 2, 
            title: "",
            value: "TensorFlow 的一个突出特点是其内置工具和库的广泛集合, 从简单的神经网络到复杂的尖端模型, 你都可以使用它创建。此外, 借助 TensorFlow Lite 和 TensorFlow.js, 你甚至可以在移动设备或浏览器中运行模型。"
          },
          { id: 3, 
            title: "",
            value: "尽管 TensorFlow 初学时可能具有一定的挑战性, 但一旦掌握, 它就展现出极大的灵活性。无论你是初学者还是在构建高级模型, TensorFlow 都是一个可靠的选择, 并且拥有庞大的社区和丰富的资源支持你的学习旅程。"
          }
        ],
      },
      { id: 2, 
        name: "NumPy",
        value: "",
        image: "",
        content: [
          { id: 1,
            title: "",
            value: "NumPy 是最广泛使用的科学计算库之一, 设计用于在数组和矩阵上执行各种数学运算。无论你在处理矩阵、统计数据, 还是大规模数字集, NumPy 都是不可或缺的工具。"
          },
          { id: 2, 
            title: "",
            value: "它是许多其他数据科学库的基础, 如 Pandas、TensorFlow 和 PyTorch。如果你计划进入数据科学或机器学习领域, 熟悉 NumPy 是关键步骤。NumPy 的高效性使其脱颖而出, 它能以极快的速度对大型数据集进行复杂计算。此外, 它提供了广泛的内置函数, 如线性代数、随机数生成等。"
          },
        ],
      },
      { id: 3, 
        name: "MatPLotLib",
        value: "",
        image: "",
        content: [
          { id: 1,
            title: "",
            value: "Matplotlib 是一个强大的数据可视化库, 用于创建各种图表和图形。无论你需要简单的折线图、详细的柱状图, 甚至是复杂的绘图, Matplotlib 都可以满足你的需求。它的多功能性使你几乎可以创建任何类型的图表或图形。"
          },
        ],
      },
      { id: 4, 
        name: "Scikit-Learn",
        value: "",
        image: "",
        content: [
          { id: 1,
            title: "",
            value: "Scikit-learn 是一个用于数据建模和实现机器学习算法的库。Scikit-learn 的最大优点之一就是其使用起来非常简便。只需几行代码, 你就可以让机器学习模型开始运行。此外, 它适合初学者和专家——无论你是刚开始接触机器学习, 还是在微调复杂的模型, Scikit-learn 都能简化这个过程。"
          },
        ],
      },
    ]
  },
  { id: 6, 
    name: "PyTorch",
    sections: [
      { id: 0, 
        name: "6. PyTorch", 
        value: "PyTorch is an open-source Deep Learning framework based on the Torch library, designed for use with the Python programming language.",
        image: "",
        content: [
          { id: 1, 
            title: "",
            value: "PyTorch 是一个开源的深度学习框架, 提供了构建和训练神经网络的工具。它以动态计算图闻名, 使其具有灵活性和直观性。"
          },
          { id: 2, 
            title: "",
            value: "PyTorch 与 Python 无缝集成, 支持 GPU 加速, 并内置自动微分系统, 能够高效地进行模型训练。在研究和工业领域, PyTorch 被广泛用于开发先进的机器学习模型。"
          },
          { id: 3, 
            title: "",
            value: "总而言之, PyTorch 是一个功能强大、灵活且用户友好的深度学习框架, 已成为开发和部署深度学习模型的最受欢迎工具之一。"
          },
        ]
      },
      { id: 1,
        name: "6.1 PyTorch 特征",
        value: "",
        image: "src/assets/chapter_zero/ptfeatures.jpeg",
        content: [
          { id: 1, 
            title: "动态计算图",
            value: "PyTorch 使用动态计算图, 这意味着图是在操作执行时动态生成的, 赋予模型设计和调试更多的灵活性。您可以在运行时修改计算图, 使其更适合处理复杂模型。"
          },
          { 
            id: 2, 
            title: "张量操作",
            value: "PyTorch 支持多维数组(称为张量), 类似于 NumPy, 但具有在 GPU 上运行的能力。这使其适合用于深度学习所需的大规模计算。"
          },
          { id: 3, 
            title: "GPU 加速",
            value: "PyTorch 充分利用 GPU 进行加速计算。通过使用 CUDA(NVIDIA 的并行计算平台), PyTorch 可以快速高效地训练深度学习模型。"
          },
          { id: 4, 
            title: "预构建模型和库",
            value: "PyTorch 拥有庞大的生态系统, 包括 TorchVision(图像处理)、TorchText(自然语言处理)和 TorchAudio(音频处理)等库。它还通过工具如 torch.hub 和 torchvision.models 提供预构建的模型。"
          },
          { id: 5, 
            title: "与 Python 集成",
            value: "PyTorch 完全与 Python 集成, 便于与其他 Python 库(如 NumPy、SciPy 和 Pandas)配合使用。这使得 PyTorch 成为许多开发者和研究人员的首选, 尤其是那些已经熟悉 Python 的用户。"
          },
        ]
      },
      { id: 2,
        name: "6.2 框架趋势",
        value: "",
        image: "src/assets/chapter_zero/pttrends.jpeg",
        content: [
          { id: 1, 
            title: "",
            value: "这张图展示了不同机器学习框架的使用趋势, 基于从 2020 年 6 月到 2024 年 6 月的论文实现份额。这些框架用不同颜色标记, 其中 PyTorch 是最受欢迎的。"
          },
          { id: 2, 
            title: "",
            value: "红色区域(代表 PyTorch)显示了显著的增长趋势。从 2020 年 3 月开始, PyTorch 的实现份额稳步上升, 最终在 2021 年中期成为主导框架。这一趋势持续到 2024 年 6 月, PyTorch 仍保持最大的份额。"
          }
        ]
      },
      { id: 3,
        name: "6.3 使用 PyTorch 的公司",
        value: "PyTorch 已成为最受欢迎的深度学习框架之一, 许多领先公司在各种行业中都使用它来进行 AI 和机器学习应用。以下是一些知名的使用 PyTorch 的公司：",
        image: "src/assets/chapter_zero/ptcompanies.jpeg",
        content: [
          { id: 1, 
            title: "Tesla",
            value: "特斯拉利用 PyTorch 进行一系列 AI 和深度学习任务, 特别是在其 Autopilot 系统和其他自动驾驶技术(如全自动驾驶 (FSD) 系统)的开发中。"
          },
          { 
            id: 2, 
            title: "NVIDIA",
            value: "英伟达将 PyTorch 作为其 GPU 加速计算工具包的一部分进行支持。许多在英伟达 GPU 上训练的深度学习模型使用 PyTorch, 且英伟达为优化 PyTorch 以适配其硬件做出了贡献。"
          },
          { id: 3, 
            title: "Microsoft",
            value: "微软在其 Azure 机器学习服务中广泛使用 PyTorch, 并且也为其开发做出了贡献。PyTorch 在 Azure 上得到支持, 使开发者更容易在云中部署模型。"
          },
          { 
            id: 4, 
            title: "Meta",
            value: "Facebook(现 Meta)开发了 PyTorch, 并在公司内广泛使用, 用于各种 AI 研究和生产任务, 包括计算机视觉、自然语言处理和推荐系统。"
          },
          { id: 5, 
            title: "OpenAI",
            value: "OpenAI 使用 PyTorch 开发了多个模型, 包括 GPT 系列(GPT-3 及以后版本)。PyTorch 的灵活性和易用性使其成为 OpenAI 研究的首选框架。"
          },
        ]
      }
    ]
  }, 
  { id: 7, 
    name: "前提条件",
    sections: [
      { id: 0, 
        name: "Python 编程语言",
        value: "",
        image: "",
        content: [
          { id: 1,
            title: "",
            value: "学习 PyTorch 时, 理解 Python 的基本知识是很重要的。这包括变量、函数、类、数据类型和数据结构等概念。Python 相对简单直观, 因此如果你已经熟悉其他编程语言, 如 Java 或 JavaScript, 应该能很快上手。"
          },
        ],
      },
      { id: 1, 
        name: "数学基础",
        value: "",
        image: "",
        content: [
          { id: 1, 
            title: "线性代数",
            value: "对向量、矩阵及矩阵乘法等操作的扎实理解是必需的, 因为这些概念是神经网络和许多其他机器学习算法的基础。我们将在下一章中进一步探讨这些内容, 重点讲解张量(Tensors)。"
          },
          { 
            id: 2, 
            title: "微积分",
            value: "对导数和积分的了解非常重要, 尤其是理解如何通过反向传播和梯度下降来优化神经网络的训练过程。"
          },
          { id: 3, 
            title: "概率与统计",
            value: "对概率、随机变量和概率分布(包括正态分布)的良好掌握对于理解损失函数、激活函数和模型的整体行为是必要的。"
          },
        ],
      },
    ]
  }, 
  { id: 8,
    name: "How to take this course?",
    sections: [
      { id: 0, 
        name: "8. 如何学习本课程?",
        value: "",
        image: "src/assets/chapter_zero/takecourse.jpeg",
        content: [
          { id: 1, 
            title: "从头到尾观看所有课程",
            value: "首先, 我建议你从头到尾观看整个课程, 即使你已经对 PyTorch 有一定了解。在课程中, 我会分享许多技巧和窍门, 以加深你的理解, 我不希望你错过其中的任何一个。我设计课程时力求简洁和重点突出, 所以你不会浪费时间在重复或不相关的内容上。确保观看每一节课。"
          },
          { 
            id: 2, 
            title: "做笔记",
            value: "在观看课程时, 我鼓励你做笔记。即使你不喜欢大量书写, 记下关键概念和想法也是非常有帮助的。我坚信写下东西有助于记忆新信息。在每节课后, 回顾你的笔记并练习我所演示的步骤。这是我学习新材料时使用的相同方法。"
          },
          { id: 3, 
            title: "复现模型",
            value: "复现模型有助于巩固整个工作流程, 从构建到改进, 通过实践加深理解。一旦掌握了这一技能, 不仅可以提高问题解决能力, 还可以增强从研究论文中复制和实现新模型的信心"
          },
          { id: 4, 
            title: "分享你的工作",
            value: "分享得越多, 学到的也就越多。为了更深入地理解本课程, 尝试基于你所学的知识构建自己的项目, 并与他人分享。分享你的工作让其他人提供反馈, 这对于提升你的技能和未来创建更好的项目是非常宝贵的。对建设性的批评保持开放态度, 这将有助于你的成长。记住, 我相信你可以做得比我更好！"
          },
        ],
      },
    ]
  }
]